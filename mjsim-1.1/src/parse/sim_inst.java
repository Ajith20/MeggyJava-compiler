
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 16 17:28:04 EDT 2015
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import java.util.*;
import parse.TokenValue;
import machine.MachineState;
import instructions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 16 17:28:04 EDT 2015
  */
public class sim_inst extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sim_inst() {super();}

  /** Constructor which sets the default scanner. */
  public sim_inst(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sim_inst(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\003\004\000\002\006" +
    "\076\000\002\004\004\000\002\004\002\000\002\007\004" +
    "\000\002\007\003\000\002\005\016\000\002\005\005\000" +
    "\002\005\005\000\002\005\007\000\002\005\007\000\002" +
    "\005\004\000\002\005\011\000\002\005\011\000\002\005" +
    "\012\000\002\005\012\000\002\005\007\000\002\005\015" +
    "\000\002\005\015\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\005\005\000\002\005\004\000\002\005\004\000\002\005" +
    "\007\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\005\004\000\002\005\011\000\002\002\003\000\002" +
    "\002\004\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\004\031\004\001\002\000\004\021\305\001" +
    "\002\000\004\002\304\001\002\000\116\002\ufffd\014\051" +
    "\026\052\031\034\032\046\033\020\034\036\035\007\036" +
    "\016\037\024\040\043\041\044\042\055\043\014\044\017" +
    "\045\030\046\035\047\041\050\047\051\010\052\053\053" +
    "\015\054\050\055\042\056\037\057\031\060\045\061\021" +
    "\062\022\063\012\064\027\065\026\070\040\071\023\072" +
    "\032\073\025\074\011\075\054\001\002\000\004\025\276" +
    "\001\002\000\004\025\272\001\002\000\004\025\270\001" +
    "\002\000\004\031\266\001\002\000\116\002\ufffd\014\051" +
    "\026\052\031\034\032\046\033\020\034\036\035\007\036" +
    "\016\037\024\040\043\041\044\042\055\043\014\044\017" +
    "\045\030\046\035\047\041\050\047\051\010\052\053\053" +
    "\015\054\050\055\042\056\037\057\031\060\045\061\021" +
    "\062\022\063\012\064\027\065\026\070\040\071\023\072" +
    "\032\073\025\074\011\075\054\001\002\000\004\004\057" +
    "\001\002\000\004\025\260\001\002\000\004\004\057\001" +
    "\002\000\004\004\057\001\002\000\004\025\254\001\002" +
    "\000\004\025\250\001\002\000\004\025\244\001\002\000" +
    "\004\031\242\001\002\000\004\025\204\001\002\000\004" +
    "\025\202\001\002\000\004\025\174\001\002\000\004\025" +
    "\166\001\002\000\004\025\162\001\002\000\004\025\160" +
    "\001\002\000\004\025\156\001\002\000\004\002\000\001" +
    "\002\000\004\031\150\001\002\000\004\025\144\001\002" +
    "\000\004\025\140\001\002\000\004\031\136\001\002\000" +
    "\004\025\132\001\002\000\004\031\130\001\002\000\004" +
    "\031\126\001\002\000\004\025\122\001\002\000\004\025" +
    "\116\001\002\000\004\025\112\001\002\000\004\025\110" +
    "\001\002\000\004\025\106\001\002\000\004\031\104\001" +
    "\002\000\004\004\057\001\002\000\120\002\uffd2\004\057" +
    "\014\uffd2\026\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\001\002\000\004" +
    "\025\064\001\002\000\004\025\062\001\002\000\004\031" +
    "\056\001\002\000\004\004\057\001\002\000\132\002\ufffb" +
    "\004\ufffb\014\ufffb\015\ufffb\016\ufffb\023\ufffb\024\ufffb\026" +
    "\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\075\ufffb\001\002\000\120\002" +
    "\uffe8\004\061\014\uffe8\026\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\001" +
    "\002\000\132\002\ufffc\004\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\023\ufffc\024\ufffc\026\ufffc\027\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065" +
    "\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc" +
    "\001\002\000\004\004\057\001\002\000\120\002\uffd3\004" +
    "\061\014\uffd3\026\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\070\uffd3" +
    "\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\001\002\000" +
    "\004\006\065\001\002\000\004\025\066\001\002\000\004" +
    "\004\057\001\002\000\120\002\uffdb\004\061\014\uffdb\026" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062" +
    "\uffdb\063\uffdb\064\uffdb\065\uffdb\070\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\001\002\000\120\002\uffd1\004" +
    "\061\014\uffd1\026\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\001\002\000" +
    "\006\004\061\015\072\001\002\000\004\031\073\001\002" +
    "\000\004\004\057\001\002\000\006\004\061\016\075\001" +
    "\002\000\004\031\076\001\002\000\004\006\077\001\002" +
    "\000\004\030\100\001\002\000\004\004\057\001\002\000" +
    "\006\004\061\026\102\001\002\000\004\004\057\001\002" +
    "\000\120\002\ufffa\004\061\014\ufffa\026\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\065\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\075\ufffa\001\002\000\004\004\057\001\002\000\120\002" +
    "\uffde\004\061\014\uffde\026\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde" +
    "\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\001" +
    "\002\000\004\004\057\001\002\000\120\002\uffe0\004\061" +
    "\014\uffe0\026\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\070\uffe0\071" +
    "\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\001\002\000\004" +
    "\004\057\001\002\000\120\002\ufff9\004\061\014\ufff9\026" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062" +
    "\ufff9\063\ufff9\064\ufff9\065\ufff9\070\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\001\002\000\004\006\113\001" +
    "\002\000\004\025\114\001\002\000\004\004\057\001\002" +
    "\000\120\002\uffea\004\061\014\uffea\026\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea" +
    "\075\uffea\001\002\000\004\006\117\001\002\000\004\025" +
    "\120\001\002\000\004\004\057\001\002\000\120\002\uffe9" +
    "\004\061\014\uffe9\026\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\070" +
    "\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\001\002" +
    "\000\004\006\123\001\002\000\004\025\124\001\002\000" +
    "\004\004\057\001\002\000\120\002\uffed\004\061\014\uffed" +
    "\026\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\064\uffed\065\uffed\070\uffed\071\uffed\072" +
    "\uffed\073\uffed\074\uffed\075\uffed\001\002\000\004\004\057" +
    "\001\002\000\120\002\uffdd\004\061\014\uffdd\026\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\001\002\000\004\004\057\001\002\000" +
    "\120\002\uffe1\004\061\014\uffe1\026\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1" +
    "\065\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075" +
    "\uffe1\001\002\000\004\006\133\001\002\000\004\025\134" +
    "\001\002\000\004\004\057\001\002\000\120\002\uffda\004" +
    "\061\014\uffda\026\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\070\uffda" +
    "\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\001\002\000" +
    "\004\004\057\001\002\000\120\002\uffd8\004\061\014\uffd8" +
    "\026\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\070\uffd8\071\uffd8\072" +
    "\uffd8\073\uffd8\074\uffd8\075\uffd8\001\002\000\004\006\141" +
    "\001\002\000\004\025\142\001\002\000\004\004\057\001" +
    "\002\000\120\002\uffe3\004\061\014\uffe3\026\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\075\uffe3\001\002\000\004\006\145\001\002\000\004" +
    "\025\146\001\002\000\004\004\057\001\002\000\120\002" +
    "\uffe2\004\061\014\uffe2\026\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2" +
    "\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\001" +
    "\002\000\004\006\151\001\002\000\004\022\152\001\002" +
    "\000\004\067\153\001\002\000\004\031\154\001\002\000" +
    "\004\004\057\001\002\000\120\002\uffd0\004\061\014\uffd0" +
    "\026\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\070\uffd0\071\uffd0\072" +
    "\uffd0\073\uffd0\074\uffd0\075\uffd0\001\002\000\004\004\057" +
    "\001\002\000\120\002\uffd6\004\061\014\uffd6\026\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6" +
    "\074\uffd6\075\uffd6\001\002\000\004\004\057\001\002\000" +
    "\120\002\uffd7\004\061\014\uffd7\026\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\001\002\000\004\006\163\001\002\000\004\025\164" +
    "\001\002\000\004\004\057\001\002\000\120\002\uffe4\004" +
    "\061\014\uffe4\026\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\001\002\000" +
    "\004\006\167\001\002\000\004\025\170\001\002\000\004" +
    "\066\171\001\002\000\004\017\172\001\002\000\004\004" +
    "\057\001\002\000\120\002\ufff4\004\061\014\ufff4\026\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\070\ufff4\071\ufff4\072\ufff4\073" +
    "\ufff4\074\ufff4\075\ufff4\001\002\000\004\066\175\001\002" +
    "\000\004\017\176\001\002\000\004\006\177\001\002\000" +
    "\004\025\200\001\002\000\004\004\057\001\002\000\120" +
    "\002\ufff3\004\061\014\ufff3\026\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3" +
    "\001\002\000\004\004\057\001\002\000\120\002\uffd5\004" +
    "\061\014\uffd5\026\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\001\002\000" +
    "\004\006\205\001\002\000\014\011\210\012\212\017\206" +
    "\020\207\067\211\001\002\000\006\004\uffcf\010\uffcf\001" +
    "\002\000\006\004\uffcd\010\uffcd\001\002\000\004\007\230" +
    "\001\002\000\004\017\227\001\002\000\004\007\215\001" +
    "\002\000\004\004\057\001\002\000\120\002\ufff0\004\061" +
    "\014\ufff0\026\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\070\ufff0\071" +
    "\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\001\002\000\012" +
    "\013\216\017\206\020\207\067\211\001\002\000\004\007" +
    "\222\001\002\000\004\010\220\001\002\000\004\004\057" +
    "\001\002\000\120\002\ufff2\004\061\014\ufff2\026\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\064\ufff2\065\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2" +
    "\074\ufff2\075\ufff2\001\002\000\004\031\223\001\002\000" +
    "\004\010\224\001\002\000\004\010\225\001\002\000\004" +
    "\004\057\001\002\000\120\002\uffef\004\061\014\uffef\026" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\065\uffef\070\uffef\071\uffef\072\uffef" +
    "\073\uffef\074\uffef\075\uffef\001\002\000\006\004\uffce\010" +
    "\uffce\001\002\000\012\013\231\017\206\020\207\067\211" +
    "\001\002\000\004\007\235\001\002\000\004\010\233\001" +
    "\002\000\004\004\057\001\002\000\120\002\ufff1\004\061" +
    "\014\ufff1\026\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\070\ufff1\071" +
    "\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\001\002\000\004" +
    "\031\236\001\002\000\004\010\237\001\002\000\004\010" +
    "\240\001\002\000\004\004\057\001\002\000\120\002\uffee" +
    "\004\061\014\uffee\026\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee" +
    "\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\070" +
    "\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee\001\002" +
    "\000\004\004\057\001\002\000\120\002\uffdf\004\061\014" +
    "\uffdf\026\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\074\uffdf\075\uffdf\001\002\000\004\006" +
    "\245\001\002\000\004\025\246\001\002\000\004\004\057" +
    "\001\002\000\120\002\uffeb\004\061\014\uffeb\026\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\075\uffeb\001\002\000\004\006\251\001\002\000" +
    "\004\031\252\001\002\000\004\004\057\001\002\000\120" +
    "\002\uffe5\004\061\014\uffe5\026\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065" +
    "\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\001\002\000\004\004\057\001\002\000\120\002\ufff8\004" +
    "\061\014\ufff8\026\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\070\ufff8" +
    "\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\001\002\000" +
    "\120\002\uffe6\004\061\014\uffe6\026\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075" +
    "\uffe6\001\002\000\120\002\ufff5\004\061\014\ufff5\026\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\070\ufff5\071\ufff5\072\ufff5\073" +
    "\ufff5\074\ufff5\075\ufff5\001\002\000\004\006\261\001\002" +
    "\000\004\025\262\001\002\000\004\004\057\001\002\000" +
    "\120\002\uffec\004\061\014\uffec\026\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\065\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075" +
    "\uffec\001\002\000\120\002\uffe7\004\061\014\uffe7\026\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\065\uffe7\070\uffe7\071\uffe7\072\uffe7\073" +
    "\uffe7\074\uffe7\075\uffe7\001\002\000\004\002\ufffe\001\002" +
    "\000\004\004\057\001\002\000\120\002\uffdc\004\061\014" +
    "\uffdc\026\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\070\uffdc\071\uffdc" +
    "\072\uffdc\073\uffdc\074\uffdc\075\uffdc\001\002\000\004\004" +
    "\057\001\002\000\120\002\uffd4\004\061\014\uffd4\026\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\070\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\075\uffd4\001\002\000\004\006\273\001\002" +
    "\000\004\025\274\001\002\000\004\004\057\001\002\000" +
    "\120\002\uffd9\004\061\014\uffd9\026\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075" +
    "\uffd9\001\002\000\004\006\277\001\002\000\006\023\300" +
    "\024\301\001\002\000\004\004\057\001\002\000\004\004" +
    "\057\001\002\000\120\002\ufff6\004\061\014\ufff6\026\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\070\ufff6\071\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\075\ufff6\001\002\000\120\002\ufff7\004\061" +
    "\014\ufff7\026\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\070\ufff7\071" +
    "\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\001\002\000\004" +
    "\002\001\001\002\000\004\004\057\001\002\000\006\004" +
    "\061\027\307\001\002\000\004\005\310\001\002\000\004" +
    "\020\311\001\002\000\004\004\057\001\002\000\006\004" +
    "\061\024\313\001\002\000\004\005\314\001\002\000\004" +
    "\020\315\001\002\000\004\004\057\001\002\000\006\004" +
    "\061\023\317\001\002\000\004\005\320\001\002\000\004" +
    "\020\321\001\002\000\004\004\057\001\002\000\006\004" +
    "\061\027\323\001\002\000\004\005\324\001\002\000\010" +
    "\017\206\020\207\067\211\001\002\000\004\004\057\001" +
    "\002\000\006\004\061\027\327\001\002\000\004\005\330" +
    "\001\002\000\010\017\206\020\207\067\211\001\002\000" +
    "\004\004\057\001\002\000\006\004\061\015\333\001\002" +
    "\000\004\031\334\001\002\000\004\004\057\001\002\000" +
    "\006\004\061\015\336\001\002\000\004\031\337\001\002" +
    "\000\004\004\057\001\002\000\006\004\061\014\341\001" +
    "\002\000\004\004\057\001\002\000\006\004\061\015\343" +
    "\001\002\000\004\031\344\001\002\000\004\004\057\001" +
    "\002\000\006\004\061\016\346\001\002\000\004\031\347" +
    "\001\002\000\004\006\350\001\002\000\004\030\351\001" +
    "\002\000\004\004\057\001\002\000\006\004\061\026\353" +
    "\001\002\000\004\004\057\001\002\000\006\004\061\032" +
    "\355\001\002\000\004\025\356\001\002\000\004\004\057" +
    "\001\002\000\006\004\061\032\360\001\002\000\004\025" +
    "\361\001\002\000\004\004\057\001\002\000\006\004\061" +
    "\035\363\001\002\000\004\025\364\001\002\000\004\006" +
    "\365\001\002\000\004\023\366\001\002\000\004\004\057" +
    "\001\002\000\006\004\061\035\370\001\002\000\004\025" +
    "\371\001\002\000\004\006\372\001\002\000\004\024\373" +
    "\001\002\000\004\004\057\001\002\000\006\004\061\042" +
    "\375\001\002\000\004\031\376\001\002\000\004\004\057" +
    "\001\002\000\120\002\uffff\004\061\014\uffff\026\uffff\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046" +
    "\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff" +
    "\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063" +
    "\uffff\064\uffff\065\uffff\070\uffff\071\uffff\072\uffff\073\uffff" +
    "\074\uffff\075\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\006\003\004\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\032\005\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\264\005\012\001\001\000\004" +
    "\007\263\001\001\000\002\001\001\000\004\007\256\001" +
    "\001\000\004\007\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\070\001\001\000\004\007\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\100\001\001\000\002\001\001" +
    "\000\004\007\102\001\001\000\002\001\001\000\004\007" +
    "\104\001\001\000\002\001\001\000\004\007\106\001\001" +
    "\000\002\001\001\000\004\007\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\124\001\001\000" +
    "\002\001\001\000\004\007\126\001\001\000\002\001\001" +
    "\000\004\007\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\134\001\001\000\002" +
    "\001\001\000\004\007\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\154\001\001\000\002\001\001\000\004\007\156" +
    "\001\001\000\002\001\001\000\004\007\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\200\001\001\000\002\001\001\000\004\007\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\213" +
    "\001\001\000\002\001\001\000\004\002\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\240\001\001\000\002\001\001\000\004" +
    "\007\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\252\001" +
    "\001\000\002\001\001\000\004\007\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\266\001\001\000\002\001\001\000\004\007\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\302\001\001\000\004\007" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\324\001\001\000\004" +
    "\007\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\330\001\001\000\004\007\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\337\001\001" +
    "\000\002\001\001\000\004\007\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\351\001\001\000\002\001\001\000\004" +
    "\007\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\361\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\366" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\376\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sim_inst$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sim_inst$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sim_inst$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    protected static MachineState machine = null;//complete hack
    //hopefully it will work.

    public sim_inst(java_cup.runtime.Scanner lexer, MachineState machine)
    {
        this(lexer);
        this.machine = machine;
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        report_fatal_error("Fatal syntax error", cur_token);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol token = (Symbol)info;
        TokenValue tok = (TokenValue)token.value;
        if (tok!=null) {
            throw new ParseException("Fatal parsing error", tok.line, tok.pos);
        }
    }
    
    public void report_error(String message, Object info) {
        Symbol token = (Symbol)info;
        if (token!=null) {
            TokenValue tok = (TokenValue)token.value;
            if (tok!=null) {
              System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
            }
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sim_inst$actions {
  private final sim_inst parser;

  /** Constructor */
  CUP$sim_inst$actions(sim_inst parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sim_inst$do_action(
    int                        CUP$sim_inst$act_num,
    java_cup.runtime.lr_parser CUP$sim_inst$parser,
    java.util.Stack            CUP$sim_inst$stack,
    int                        CUP$sim_inst$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sim_inst$result;

      /* select the action based on the action number */
      switch (CUP$sim_inst$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= HEX 
            {
              TokenValue RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).right;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.peek()).value;
		
			RESULT=new TokenValue(n.toString(), n.line, n.pos);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= MINUS NUM 
            {
              TokenValue RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).right;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.peek()).value;
		
			RESULT=new TokenValue("-"+n.toString(), n.line, n.pos);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= NUM 
            {
              TokenValue RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).right;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.peek()).value;
		
			RESULT=n;
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instr ::= ID ID COMMA DOT MINUS ID eol 
            {
              Instr RESULT =null;
		
            /* Do not do anything... */
        
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-6)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instr ::= LABEL eol 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
            //Edit the label a bit.
            String label = l.toString();
            label = label.substring(0,label.indexOf(':'));
			RESULT=new InstrLabel(sim_inst.machine,label);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instr ::= LABEL 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.peek()).value;

              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instr ::= AVR_ROR REG eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT = new InstrROR(sim_inst.machine,Integer.parseInt(r.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instr ::= AVR_ROL REG eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT = new InstrROL(sim_inst.machine,Integer.parseInt(r.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instr ::= AVR_LSR REG eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT = new InstrLSR(sim_inst.machine,Integer.parseInt(r.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instr ::= AVR_LSL REG eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT = new InstrLSL(sim_inst.machine,Integer.parseInt(r.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instr ::= AVR_TST REG eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT = new InstrTST(sim_inst.machine,Integer.parseInt(r.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instr ::= AVR_BRLT ID eol 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT = new InstrBRLT(sim_inst.machine,l.toString());
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instr ::= AVR_OR REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrOr(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instr ::= AVR_CPC REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
            RESULT= new InstrCPC(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
        
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instr ::= AVR_CP REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
            RESULT= new InstrCP(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
        
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instr ::= AVR_BRNE ID eol 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
            RESULT= new InstrBRNE(sim_inst.machine,l.toString()); 
        
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instr ::= AVR_BRLO ID eol 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
            RESULT= new InstrBRLO(sim_inst.machine,l.toString()); 
        
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instr ::= AVR_BREQ ID eol 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
            RESULT= new InstrBREQ(sim_inst.machine,l.toString()); 
        
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instr ::= AVR_BRMI ID eol 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
            RESULT= new InstrBRMI(sim_inst.machine,l.toString()); 
        
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instr ::= AVR_NEG REG eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrNeg(sim_inst.machine,Integer.parseInt(r.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instr ::= AVR_JMP ID eol 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrJmp(sim_inst.machine,l.toString());
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instr ::= AVR_EOR REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrEor(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instr ::= AVR_MOV REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrMov(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instr ::= AVR_AND REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrAnd(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instr ::= AVR_LDS REG COMMA ID eol 
            {
              Instr RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue rd = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrLDS(sim_inst.machine,Integer.parseInt(rd.toString().substring(1)),l.toString());
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instr ::= AVR_RET eol 
            {
              Instr RESULT =null;
		
			RESULT= new InstrRet(sim_inst.machine);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instr ::= AVR_ICALL eol 
            {
              Instr RESULT =null;
		
			RESULT = new InstrICall(sim_inst.machine);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instr ::= AVR_CALL ID eol 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrCall(sim_inst.machine,l.toString());
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instr ::= AVR_ADC REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrAdc(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instr ::= AVR_MULS REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrMuls(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instr ::= AVR_SBC REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrSBC(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instr ::= AVR_SUB REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrSub(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instr ::= AVR_ADD REG COMMA REG eol 
            {
              Instr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r1 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r2 = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrAdd(sim_inst.machine,Integer.parseInt(r1.toString().substring(1)),Integer.parseInt(r2.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instr ::= AVR_LDI REG COMMA AVR_HI LPAREN AVR_GS LPAREN ID RPAREN RPAREN eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-9)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		
			RESULT = new InstrLDILabel(sim_inst.machine, Integer.parseInt(r.toString().substring(1)), i.toString(), InstrLDILabel.LDIType.HI);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-10)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr ::= AVR_LDI REG COMMA AVR_LO LPAREN AVR_GS LPAREN ID RPAREN RPAREN eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-9)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		
			RESULT = new InstrLDILabel(sim_inst.machine, Integer.parseInt(r.toString().substring(1)), i.toString(), InstrLDILabel.LDIType.LO);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-10)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instr ::= AVR_LDI REG COMMA exp eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrLDI(sim_inst.machine,Integer.parseInt(r.toString().substring(1)),Integer.parseInt(e.toString()));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr ::= AVR_LDI REG COMMA AVR_HI LPAREN exp RPAREN eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-6)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)).right;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)).value;
		
			RESULT= new
            InstrLDI(sim_inst.machine,Integer.parseInt(r.toString().substring(1)),Integer.parseInt(e.toString()),InstrLDI.LDIType.HI);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-7)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= AVR_LDI REG COMMA AVR_LO LPAREN exp RPAREN eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-6)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)).right;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)).value;
		
			RESULT= new
            InstrLDI(sim_inst.machine,Integer.parseInt(r.toString().substring(1)),Integer.parseInt(e.toString()),InstrLDI.LDIType.LO);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-7)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= AVR_STD REG PLUS NUM COMMA REG eol 
            {
              Instr RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-5)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-5)).right;
		TokenValue base = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue offset = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrSTD(sim_inst.machine,
			                    Integer.parseInt(r.toString().substring(1)), 
			                    base.toString().charAt(0), 
			                    Integer.parseInt(offset.toString()) );
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-6)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr ::= AVR_LDD REG COMMA REG PLUS NUM eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-5)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-5)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue base = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue offset = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrLD(sim_inst.machine,
			                    Integer.parseInt(r.toString().substring(1)), 
			                    base.toString().charAt(0), 
			                    Integer.parseInt(offset.toString()) );
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-6)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instr ::= AVR_LD eol 
            {
              Instr RESULT =null;
		
			//RESULT= new InstrLD(sim_inst.machine);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instr ::= AVR_IN REG COMMA SP_H eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		
			RESULT= new InstrIn(sim_inst.machine,Integer.parseInt(r.toString().substring(1)),InstrInType.SPH);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instr ::= AVR_IN REG COMMA SP_L eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-3)).value;
		
			RESULT= new InstrIn(sim_inst.machine,Integer.parseInt(r.toString().substring(1)),InstrInType.SPL);
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-4)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instr ::= AVR_POP REG eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrPop(sim_inst.machine,Integer.parseInt(r.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instr ::= AVR_PUSH REG eol 
            {
              Instr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
			RESULT= new InstrPush(sim_inst.machine,Integer.parseInt(r.toString().substring(1)));
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-2)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instr ::= DOTTEXT eol DOTGLOBAL ID eol DOTTYPE ID COMMA TYPE eol LABEL eol 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		
            //Edit the label a bit.
            String label = l.toString();
            label = label.substring(0,label.indexOf(':'));
			RESULT=new FuncStart(sim_inst.machine,label);
        
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-11)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // eol ::= EOL 
            {
              Object RESULT =null;
		 /*do nothing*/
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("eol",5, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // eol ::= eol EOL 
            {
              Object RESULT =null;

              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("eol",5, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrs ::= 
            {
              List<Instr> RESULT =null;
		
            RESULT = new LinkedList<Instr>();
        
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instrs",2, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrs ::= instr instrs 
            {
              List<Instr> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		Instr t = (Instr)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).right;
		List<Instr> list = (List<Instr>)((java_cup.runtime.Symbol) CUP$sim_inst$stack.peek()).value;
		
            list.add(0,t);
			RESULT=list;
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("instrs",2, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= ID QSTRING eol GLOBAL ASSIGN HEX eol SP_H ASSIGN HEX eol SP_L ASSIGN HEX eol GLOBAL ASSIGN exp eol GLOBAL ASSIGN exp eol DOTGLOBAL ID eol DOTGLOBAL ID eol DOTTEXT eol DOTGLOBAL ID eol DOTTYPE ID COMMA TYPE eol LABEL eol AVR_PUSH REG eol AVR_PUSH REG eol AVR_IN REG COMMA SP_L eol AVR_IN REG COMMA SP_H eol AVR_CALL ID eol 
            {
              Object RESULT =null;
		
		    RESULT=null;//empty state.
        
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("header",4, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-59)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgrm ::= header instrs 
            {
              List<Instr> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()).right;
		List<Instr> s = (List<Instr>)((java_cup.runtime.Symbol) CUP$sim_inst$stack.peek()).value;
		
			RESULT=s;
		
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("pgrm",1, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          return CUP$sim_inst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pgrm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).right;
		List<Instr> start_val = (List<Instr>)((java_cup.runtime.Symbol) CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)).value;
		RESULT = start_val;
              CUP$sim_inst$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sim_inst$stack.elementAt(CUP$sim_inst$top-1)), ((java_cup.runtime.Symbol)CUP$sim_inst$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sim_inst$parser.done_parsing();
          return CUP$sim_inst$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

