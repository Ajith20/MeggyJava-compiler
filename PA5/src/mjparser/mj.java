
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 15 19:12:07 EST 2015
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;
import ast.visitor.*;
import ast_visitors.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 15 19:12:07 EST 2015
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\007\000\002\006" +
    "\023\000\002\015\005\000\002\016\004\000\002\016\002" +
    "\000\002\007\010\000\002\012\004\000\002\012\002\000" +
    "\002\013\017\000\002\013\014\000\002\011\004\000\002" +
    "\011\002\000\002\017\004\000\002\020\005\000\002\020" +
    "\004\000\002\020\002\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\004\013\000\002\004\007\000\002\004\005\000\002\004" +
    "\011\000\002\004\007\000\002\004\011\000\002\004\007" +
    "\000\002\004\011\000\002\004\005\000\002\005\004\000" +
    "\002\005\002\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\010\005\000\002\010\010\000\002\010\006" +
    "\000\002\010\006\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\004\000\002\010\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\006\000\002\010\010" +
    "\000\002\003\005\000\002\003\004\000\002\003\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\004\017\005\001\002\000\004\002\245\001" +
    "\002\000\004\046\006\001\002\000\004\045\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\225\001\002\000" +
    "\006\002\ufff9\037\ufff9\001\002\000\006\002\000\037\013" +
    "\001\002\000\004\061\015\001\002\000\006\002\ufffa\037" +
    "\ufffa\001\002\000\004\011\016\001\002\000\026\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\032\ufffc\036\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\061\ufffc\001\002\000\026\012\ufff5\013\021" +
    "\014\020\015\031\032\ufff5\036\022\047\030\050\024\051" +
    "\023\061\025\001\002\000\004\061\uffee\001\002\000\004" +
    "\061\ufff0\001\002\000\004\061\uffed\001\002\000\004\061" +
    "\uffea\001\002\000\004\061\uffeb\001\002\000\004\061\uffe9" +
    "\001\002\000\004\061\223\001\002\000\006\012\033\032" +
    "\034\001\002\000\004\061\uffec\001\002\000\004\061\uffef" +
    "\001\002\000\100\005\ufffd\007\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\020\ufffd\025\ufffd\026\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\036\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070" +
    "\ufffd\001\002\000\006\002\ufffb\037\ufffb\001\002\000\022" +
    "\013\021\014\020\015\031\036\022\047\030\050\024\051" +
    "\023\061\025\001\002\000\006\012\ufff6\032\ufff6\001\002" +
    "\000\004\061\037\001\002\000\004\007\040\001\002\000" +
    "\026\010\ufff1\013\ufff1\014\ufff1\015\ufff1\027\ufff1\036\ufff1" +
    "\047\ufff1\050\ufff1\051\ufff1\061\ufff1\001\002\000\026\010" +
    "\045\013\021\014\020\015\031\027\044\036\022\047\030" +
    "\050\024\051\023\061\025\001\002\000\026\010\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\027\ufff2\036\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\061\ufff2\001\002\000\004\061\222\001\002\000" +
    "\022\013\021\014\020\015\031\036\022\047\030\050\024" +
    "\051\023\061\025\001\002\000\004\011\046\001\002\000" +
    "\076\005\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\020\ufffc\025\ufffc\026\ufffc\031\ufffc\033\ufffc\036" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\001\002\000\076" +
    "\005\uffde\007\uffde\011\uffde\012\uffde\013\021\014\020\015" +
    "\031\020\uffde\025\uffde\026\uffde\031\uffde\033\uffde\036\022" +
    "\047\030\050\024\051\023\052\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\025\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\066\uffde\067\uffde\070\uffde\001\002\000\060\005" +
    "\074\007\062\011\063\012\053\020\061\025\055\026\054" +
    "\031\077\033\056\052\067\054\051\055\100\056\101\057" +
    "\072\060\066\061\064\062\075\063\057\064\073\065\070" +
    "\066\076\067\060\070\065\001\002\000\004\007\213\001" +
    "\002\000\060\005\uffdf\007\uffdf\011\uffdf\012\uffdf\020\uffdf" +
    "\025\uffdf\026\uffdf\031\uffdf\033\uffdf\052\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\001\002\000" +
    "\006\012\ufff7\032\ufff7\001\002\000\004\007\207\001\002" +
    "\000\036\005\074\007\062\025\055\031\077\056\101\057" +
    "\072\060\066\061\064\063\057\064\073\065\070\066\076" +
    "\067\060\070\065\001\002\000\036\005\074\007\062\025" +
    "\055\031\077\056\101\057\072\060\066\061\064\063\057" +
    "\064\073\065\070\066\076\067\060\070\065\001\002\000" +
    "\060\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\045" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\067\uffcf\070\uffcf\001\002\000\060\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2\045\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\061\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\067\uffd2\070\uffd2\001\002\000\004\007\175\001" +
    "\002\000\040\005\074\007\062\015\171\025\055\031\077" +
    "\056\101\057\072\060\066\061\064\063\057\064\073\065" +
    "\070\066\076\067\060\070\065\001\002\000\056\005\uffde" +
    "\007\uffde\011\uffde\012\uffde\020\uffde\025\uffde\026\uffde\031" +
    "\uffde\052\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\001\002\000\060\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\045\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070" +
    "\uffcb\001\002\000\060\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\022\uffca\023\uffca\024\uffca\025\uffca\027\uffca\030" +
    "\uffca\031\uffca\045\uffca\056\uffca\057\uffca\060\uffca\061\uffca" +
    "\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\001" +
    "\002\000\060\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\045\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002\000" +
    "\004\007\156\001\002\000\060\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\045\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070" +
    "\uffd1\001\002\000\020\004\107\005\111\006\112\022\105" +
    "\023\110\024\106\030\150\001\002\000\004\007\145\001" +
    "\002\000\060\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce\031" +
    "\uffce\045\uffce\056\uffce\057\uffce\060\uffce\061\uffce\063\uffce" +
    "\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\001\002\000" +
    "\036\005\074\007\062\025\055\031\077\056\101\057\072" +
    "\060\066\061\064\063\057\064\073\065\070\066\076\067" +
    "\060\070\065\001\002\000\036\005\074\007\062\025\055" +
    "\031\077\056\101\057\072\060\066\061\064\063\057\064" +
    "\073\065\070\066\076\067\060\070\065\001\002\000\060" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0\045\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\061\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\070\uffd0\001\002\000\004\061\137" +
    "\001\002\000\004\007\133\001\002\000\004\007\102\001" +
    "\002\000\036\005\074\007\062\025\055\031\077\056\101" +
    "\057\072\060\066\061\064\063\057\064\073\065\070\066" +
    "\076\067\060\070\065\001\002\000\022\004\107\005\111" +
    "\006\112\022\105\023\110\024\106\027\104\030\113\001" +
    "\002\000\036\005\074\007\062\025\055\031\077\056\101" +
    "\057\072\060\066\061\064\063\057\064\073\065\070\066" +
    "\076\067\060\070\065\001\002\000\036\005\074\007\062" +
    "\025\055\031\077\056\101\057\072\060\066\061\064\063" +
    "\057\064\073\065\070\066\076\067\060\070\065\001\002" +
    "\000\036\005\074\007\062\025\055\031\077\056\101\057" +
    "\072\060\066\061\064\063\057\064\073\065\070\066\076" +
    "\067\060\070\065\001\002\000\036\005\074\007\062\025" +
    "\055\031\077\056\101\057\072\060\066\061\064\063\057" +
    "\064\073\065\070\066\076\067\060\070\065\001\002\000" +
    "\036\005\074\007\062\025\055\031\077\056\101\057\072" +
    "\060\066\061\064\063\057\064\073\065\070\066\076\067" +
    "\060\070\065\001\002\000\036\005\074\007\062\025\055" +
    "\031\077\056\101\057\072\060\066\061\064\063\057\064" +
    "\073\065\070\066\076\067\060\070\065\001\002\000\036" +
    "\005\074\007\062\025\055\031\077\056\101\057\072\060" +
    "\066\061\064\063\057\064\073\065\070\066\076\067\060" +
    "\070\065\001\002\000\004\061\114\001\002\000\004\007" +
    "\115\001\002\000\042\005\uffc5\007\uffc5\010\uffc5\025\uffc5" +
    "\027\uffc5\031\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\001\002" +
    "\000\042\005\074\007\062\010\121\025\055\027\120\031" +
    "\077\056\101\057\072\060\066\061\064\063\057\064\073" +
    "\065\070\066\076\067\060\070\065\001\002\000\056\004" +
    "\107\005\111\006\112\007\uffc6\010\uffc6\022\105\023\110" +
    "\024\106\025\uffc6\027\uffc6\030\113\031\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\001\002\000\036\005\074\007\062\025" +
    "\055\031\077\056\101\057\072\060\066\061\064\063\057" +
    "\064\073\065\070\066\076\067\060\070\065\001\002\000" +
    "\060\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\027\uffc8\030\uffc8\031\uffc8\045" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\067\uffc8\070\uffc8\001\002\000\056\004" +
    "\107\005\111\006\112\007\uffc7\010\uffc7\022\105\023\110" +
    "\024\106\025\uffc7\027\uffc7\030\113\031\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\070\uffc7\001\002\000\060\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\045\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\061\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9" +
    "\070\uffd9\001\002\000\060\004\uffda\005\uffda\006\112\007" +
    "\uffda\010\uffda\022\uffda\023\uffda\024\uffda\025\uffda\027\uffda" +
    "\030\uffda\031\uffda\045\uffda\056\uffda\057\uffda\060\uffda\061" +
    "\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda" +
    "\001\002\000\060\004\107\005\111\006\112\007\uffdc\010" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\045\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\001\002" +
    "\000\060\004\uffdb\005\uffdb\006\112\007\uffdb\010\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\045\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\001\002\000\060" +
    "\004\107\005\111\006\112\007\uffdd\010\uffdd\022\uffdd\023" +
    "\110\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\045\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\063\uffdd\064\uffdd\065" +
    "\uffdd\066\uffdd\067\uffdd\070\uffdd\001\002\000\060\004\107" +
    "\005\111\006\112\007\uffd7\010\uffd7\022\uffd7\023\110\024" +
    "\106\025\uffd7\027\uffd7\030\113\031\uffd7\045\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\063\uffd7\064\uffd7\065\uffd7\066" +
    "\uffd7\067\uffd7\070\uffd7\001\002\000\022\004\107\005\111" +
    "\006\112\010\132\022\105\023\110\024\106\030\113\001" +
    "\002\000\060\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\045\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\001\002\000" +
    "\036\005\074\007\062\025\055\031\077\056\101\057\072" +
    "\060\066\061\064\063\057\064\073\065\070\066\076\067" +
    "\060\070\065\001\002\000\022\004\107\005\111\006\112" +
    "\010\135\022\105\023\110\024\106\030\113\001\002\000" +
    "\004\045\136\001\002\000\062\005\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\020\uffe7\021\uffe7\025\uffe7\026\uffe7\031\uffe7\033" +
    "\uffe7\052\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\070\uffe7\001\002\000\004\007\140\001\002\000\004" +
    "\010\141\001\002\000\060\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\045\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\001\002\000\022\004\107\005\111\006\112\022\105\023" +
    "\110\024\106\030\113\045\143\001\002\000\062\005\uffe6" +
    "\007\uffe6\011\uffe6\012\uffe6\020\uffe6\021\uffe6\025\uffe6\026" +
    "\uffe6\031\uffe6\033\uffe6\052\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\001\002\000\060\004\uffd8" +
    "\005\uffd8\006\112\007\uffd8\010\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\045\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\001\002\000\036\005\074\007\062" +
    "\025\055\031\077\056\101\057\072\060\066\061\064\063" +
    "\057\064\073\065\070\066\076\067\060\070\065\001\002" +
    "\000\022\004\107\005\111\006\112\010\147\022\105\023" +
    "\110\024\106\030\113\001\002\000\060\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\045\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\001\002\000\004\061\151\001\002\000\004" +
    "\007\152\001\002\000\042\005\uffc5\007\uffc5\010\uffc5\025" +
    "\uffc5\027\uffc5\031\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\001" +
    "\002\000\042\005\074\007\062\010\154\025\055\027\120" +
    "\031\077\056\101\057\072\060\066\061\064\063\057\064" +
    "\073\065\070\066\076\067\060\070\065\001\002\000\022" +
    "\004\uffc8\005\uffc8\006\uffc8\022\uffc8\023\uffc8\024\uffc8\030" +
    "\uffc8\045\155\001\002\000\062\005\uffe1\007\uffe1\011\uffe1" +
    "\012\uffe1\020\uffe1\021\uffe1\025\uffe1\026\uffe1\031\uffe1\033" +
    "\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\070\uffe1\001\002\000\036\005\074\007\062\025\055" +
    "\031\077\056\101\057\072\060\066\061\064\063\057\064" +
    "\073\065\070\066\076\067\060\070\065\001\002\000\022" +
    "\004\107\005\111\006\112\022\105\023\110\024\106\027" +
    "\160\030\113\001\002\000\036\005\074\007\062\025\055" +
    "\031\077\056\101\057\072\060\066\061\064\063\057\064" +
    "\073\065\070\066\076\067\060\070\065\001\002\000\022" +
    "\004\107\005\111\006\112\022\105\023\110\024\106\027" +
    "\162\030\113\001\002\000\036\005\074\007\062\025\055" +
    "\031\077\056\101\057\072\060\066\061\064\063\057\064" +
    "\073\065\070\066\076\067\060\070\065\001\002\000\022" +
    "\004\107\005\111\006\112\010\164\022\105\023\110\024" +
    "\106\030\113\001\002\000\004\045\165\001\002\000\062" +
    "\005\uffe8\007\uffe8\011\uffe8\012\uffe8\020\uffe8\021\uffe8\025" +
    "\uffe8\026\uffe8\031\uffe8\033\uffe8\052\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\001\002\000\056" +
    "\005\074\007\062\011\063\012\167\020\061\025\055\026" +
    "\054\031\077\052\067\054\051\055\100\056\101\057\072" +
    "\060\066\061\064\062\075\063\057\064\073\065\070\066" +
    "\076\067\060\070\065\001\002\000\062\005\uffe0\007\uffe0" +
    "\011\uffe0\012\uffe0\020\uffe0\021\uffe0\025\uffe0\026\uffe0\031" +
    "\uffe0\033\uffe0\052\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\070\uffe0\001\002\000\022\004\107\005\111" +
    "\006\112\010\174\022\105\023\110\024\106\030\113\001" +
    "\002\000\004\010\172\001\002\000\036\005\074\007\062" +
    "\025\055\031\077\056\101\057\072\060\066\061\064\063" +
    "\057\064\073\065\070\066\076\067\060\070\065\001\002" +
    "\000\060\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\045\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\001\002\000\060" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc\045\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\001\002\000\036\005\074" +
    "\007\062\025\055\031\077\056\101\057\072\060\066\061" +
    "\064\063\057\064\073\065\070\066\076\067\060\070\065" +
    "\001\002\000\022\004\107\005\111\006\112\010\177\022" +
    "\105\023\110\024\106\030\113\001\002\000\054\005\074" +
    "\007\062\011\063\020\061\025\055\026\054\031\077\052" +
    "\067\054\051\055\100\056\101\057\072\060\066\061\064" +
    "\062\075\063\057\064\073\065\070\066\076\067\060\070" +
    "\065\001\002\000\062\005\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\020\uffe4\021\201\025\uffe4\026\uffe4\031\uffe4\033\uffe4\052" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070" +
    "\uffe4\001\002\000\054\005\074\007\062\011\063\020\061" +
    "\025\055\026\054\031\077\052\067\054\051\055\100\056" +
    "\101\057\072\060\066\061\064\062\075\063\057\064\073" +
    "\065\070\066\076\067\060\070\065\001\002\000\062\005" +
    "\uffe3\007\uffe3\011\uffe3\012\uffe3\020\uffe3\021\uffe3\025\uffe3" +
    "\026\uffe3\031\uffe3\033\uffe3\052\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\070\uffe3\001\002\000\022\004" +
    "\107\005\111\006\112\022\105\023\110\024\106\030\113" +
    "\045\204\001\002\000\004\012\205\001\002\000\006\012" +
    "\ufff8\032\ufff8\001\002\000\060\004\107\005\111\006\112" +
    "\007\uffcd\010\uffcd\022\105\023\110\024\106\025\uffcd\027" +
    "\uffcd\030\113\031\uffcd\045\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070" +
    "\uffcd\001\002\000\036\005\074\007\062\025\055\031\077" +
    "\056\101\057\072\060\066\061\064\063\057\064\073\065" +
    "\070\066\076\067\060\070\065\001\002\000\022\004\107" +
    "\005\111\006\112\010\211\022\105\023\110\024\106\030" +
    "\113\001\002\000\054\005\074\007\062\011\063\020\061" +
    "\025\055\026\054\031\077\052\067\054\051\055\100\056" +
    "\101\057\072\060\066\061\064\062\075\063\057\064\073" +
    "\065\070\066\076\067\060\070\065\001\002\000\062\005" +
    "\uffe2\007\uffe2\011\uffe2\012\uffe2\020\uffe2\021\uffe2\025\uffe2" +
    "\026\uffe2\031\uffe2\033\uffe2\052\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2" +
    "\065\uffe2\066\uffe2\067\uffe2\070\uffe2\001\002\000\036\005" +
    "\074\007\062\025\055\031\077\056\101\057\072\060\066" +
    "\061\064\063\057\064\073\065\070\066\076\067\060\070" +
    "\065\001\002\000\022\004\107\005\111\006\112\022\105" +
    "\023\110\024\106\027\215\030\113\001\002\000\036\005" +
    "\074\007\062\025\055\031\077\056\101\057\072\060\066" +
    "\061\064\063\057\064\073\065\070\066\076\067\060\070" +
    "\065\001\002\000\022\004\107\005\111\006\112\010\217" +
    "\022\105\023\110\024\106\030\113\001\002\000\004\045" +
    "\220\001\002\000\062\005\uffe5\007\uffe5\011\uffe5\012\uffe5" +
    "\020\uffe5\021\uffe5\025\uffe5\026\uffe5\031\uffe5\033\uffe5\052" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070" +
    "\uffe5\001\002\000\026\010\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\027\ufff3\036\ufff3\047\ufff3\050\ufff3\051\ufff3\061\ufff3\001" +
    "\002\000\026\010\ufff4\013\ufff4\014\ufff4\015\ufff4\027\ufff4" +
    "\036\ufff4\047\ufff4\050\ufff4\051\ufff4\061\ufff4\001\002\000" +
    "\004\045\224\001\002\000\100\005\ufffe\007\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\020\ufffe\025\ufffe\026" +
    "\ufffe\031\ufffe\032\ufffe\033\ufffe\036\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\001\002\000\004\011\226\001\002\000" +
    "\004\032\227\001\002\000\004\034\230\001\002\000\004" +
    "\036\231\001\002\000\004\016\232\001\002\000\004\007" +
    "\233\001\002\000\004\035\234\001\002\000\004\041\235" +
    "\001\002\000\004\042\236\001\002\000\004\061\237\001" +
    "\002\000\004\010\240\001\002\000\004\011\241\001\002" +
    "\000\056\005\uffde\007\uffde\011\uffde\012\uffde\020\uffde\025" +
    "\uffde\026\uffde\031\uffde\052\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\066\uffde\067\uffde\070\uffde\001\002\000\056\005\074" +
    "\007\062\011\063\012\243\020\061\025\055\026\054\031" +
    "\077\052\067\054\051\055\100\056\101\057\072\060\066" +
    "\061\064\062\075\063\057\064\073\065\070\066\076\067" +
    "\060\070\065\001\002\000\004\012\244\001\002\000\006" +
    "\002\uffff\037\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\010\001\001" +
    "\000\002\001\001\000\004\012\011\001\001\000\004\007" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\016\001\001\000\010\011\026\014" +
    "\025\015\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\040\001" +
    "\001\000\006\014\042\017\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\042\017\220\001\001\000" +
    "\002\001\001\000\004\016\046\001\001\000\010\005\047" +
    "\014\025\015\031\001\001\000\006\004\051\010\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\205\001\001\000\004\010" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\167\001\001\000\004\005\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\143\001\001" +
    "\000\004\010\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\102" +
    "\001\001\000\002\001\001\000\004\010\130\001\001\000" +
    "\004\010\127\001\001\000\004\010\126\001\001\000\004" +
    "\010\125\001\001\000\004\010\124\001\001\000\004\010" +
    "\123\001\001\000\004\010\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\115\001\001\000\004\010" +
    "\116\001\001\000\002\001\001\000\004\010\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\152\001\001\000\004\010\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\156\001\001" +
    "\000\002\001\001\000\004\010\160\001\001\000\002\001" +
    "\001\000\004\010\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\051\010\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\175\001\001\000\002\001\001\000\006" +
    "\004\177\010\070\001\001\000\002\001\001\000\006\004" +
    "\201\010\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\207\001\001\000\002\001\001\000\006\004\211" +
    "\010\070\001\001\000\002\001\001\000\004\010\213\001" +
    "\001\000\002\001\001\000\004\010\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\241" +
    "\001\001\000\006\004\051\010\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp_list ::= 
            {
              LinkedList<IExp> RESULT =null;
		 RESULT = new LinkedList<IExp>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp_list ::= exp_list expression 
            {
              LinkedList<IExp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(exp!=null) { list.add(exp); } RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp_list ::= exp_list COMMA expression 
            {
              LinkedList<IExp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(exp!=null) {list.add(exp); } RESULT=list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression DOT ID LPAREN exp_list RPAREN 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue dt = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new CallExp(dt.line, dt.pos, e1, id.lexeme, list); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new NewExp(op.line, op.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= THIS 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= ID 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(id.line, id.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= LPAREN expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = a; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= NOT expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NotExp(1, 1, (IExp)a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= FALSE 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(a.line, a.pos, a.lexeme, a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= TRUE 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(a.line, a.pos, a.lexeme, a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(a.line, a.pos, a.lexeme, a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(a.line, a.pos, a.lexeme, a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneLiteral(a.line, a.pos, a.lexeme, a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(a.line, a.pos, a.lexeme, a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= LPAREN BYTE RPAREN expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteCast(op.line, op.pos, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= MEGGYCHECKBUTTON LPAREN expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyCheckButton(op.line, op.pos, (IExp)a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= MEGGYGETPIXEL LPAREN expression COMMA expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyGetPixel(op.line, op.pos, (IExp)a, (IExp)b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression LT expression 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new LtExp(op.line, op.pos, e1, e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= MINUS expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(1, 1, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression TIMES expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MulExp(op.line, op.pos, (IExp)a, (IExp)b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression MINUS expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MinusExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression PLUS expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new PlusExp(op.line, op.pos, (IExp)a, (IExp)b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression EQUAL expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new EqualExp(op.line, op.pos, (IExp)a, (IExp)b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression AND expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new AndExp(op.line, op.pos, (IExp)a, (IExp)b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_list ::= 
            {
              List<IStatement> RESULT =null;
		 RESULT = new LinkedList<IStatement>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_list ::= statement_list statement 
            {
              List<IStatement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> list = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(s!=null) { list.add(s); } RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> list = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new BlockStatement(op.line, op.pos, list); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= expression DOT ID LPAREN exp_list RPAREN SEMI 
            {
              IStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue dt = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new CallStatement(dt.line, dt.pos, e1, id.lexeme, list); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= WHILE LPAREN expression RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new WhileStatement(op.line, op.pos, (IExp)a, (IStatement)s1); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line, op.pos, (IExp)a, (IStatement)s1, (IStatement)s2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= IF LPAREN expression RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line, op.pos, a, s1, (IStatement)null); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= MEGGYTONESTART LPAREN expression COMMA expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue q = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyToneStart(q.line, q.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= ASSIG_ID expression SEMI 
            {
              IStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 String[] arr = id.lexeme.split(" "); 
	   RESULT = new AssignStatement(id.line, id.pos, arr[0], e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= MEGGYDELAY LPAREN expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyDelay(op.line, op.pos, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= MEGGYSETPIXEL LPAREN expression COMMA expression COMMA expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp c = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetPixel(op.line, op.pos, a, b, c); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ClassType(a.line, a.pos, a.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= MEGGYTONE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= MEGGYBUTTON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= MEGGYCOLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= VOID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new VoidType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BYTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new BoolType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal_list ::= 
            {
              LinkedList<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_list ::= formal_list formal 
            {
              LinkedList<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int frmalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int frmalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal frmal = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(frmal!=null) { list.add(frmal); } RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_list ::= formal_list COMMA formal 
            {
              LinkedList<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int frmalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int frmalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal frmal = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(frmal!=null) {list.add(frmal); } RESULT=list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal ::= type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new Formal(id.line, id.pos, (IType)t, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_list ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		 RESULT = new LinkedList<MethodDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_list",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_list ::= method_list method 
            {
              LinkedList<MethodDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> list = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int mthleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mthright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl mth = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(mth!=null) { list.add(mth); } RESULT=list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_list",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method ::= PUBLIC type ID LPAREN formal_list RPAREN LBRACE var_list statement_list RBRACE 
            {
              MethodDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int fmlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int fmlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		LinkedList<Formal> fmlist = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int vlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int vlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<VarDecl> vlist = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> stlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MethodDecl(p.line, p.pos, (IType)t, id.lexeme, fmlist, vlist, stlist); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method ::= PUBLIC type ID LPAREN formal_list RPAREN LBRACE var_list statement_list RETURN expression SEMI RBRACE 
            {
              MethodDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int fmlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int fmlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		LinkedList<Formal> fmlist = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int vlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int vlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		LinkedList<VarDecl> vlist = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		List<IStatement> stlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MethodDecl(p.line, p.pos, (IType)t, id.lexeme, fmlist, vlist, stlist, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class_list ::= 
            {
              List<IClassDecl> RESULT =null;
		 RESULT = new LinkedList<IClassDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_list",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_list ::= class_list class 
            {
              List<IClassDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IClassDecl> list = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int clssleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int clssright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IClassDecl clss = (IClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(clss!=null) {list.add(clss); } RESULT=list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_list",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS ID LBRACE var_list method_list RBRACE 
            {
              IClassDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int vlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int vlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<VarDecl> vlist = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> mlist = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new TopClassDecl(c.line, c.pos, name.lexeme, vlist, mlist); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_list ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		 RESULT = new LinkedList<VarDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_list ::= var_list var 
            {
              LinkedList<VarDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<VarDecl> list = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(v!=null) { list.add(v); } RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var ::= type ID SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new VarDecl(id.line, id.pos, (IType)t, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE statement_list RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-16)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-15)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IStatement> list = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		if(!(parser.programName.equals(name.lexeme + ".java"))) { 
				System.out.println("Class name and file name do not match.");
				System.exit(1); }
		RESULT = new MainClass(op.line, op.pos, name.lexeme, param.lexeme, new BlockStatement(op.line, op.pos, list));
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class class_list 
            {
              Program RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass a = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IClassDecl> c = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new Program(op.line, op.pos, a, c ); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

