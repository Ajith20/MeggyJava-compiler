
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 08 18:15:26 EST 2015
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast_visitors.*;
import ast.node.*;
import ast.visitor.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 08 18:15:26 EST 2015
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\007\000\002\017" +
    "\002\000\002\020\002\000\002\007\023\000\002\010\007" +
    "\000\002\011\004\000\002\011\002\000\002\015\015\000" +
    "\002\015\012\000\002\016\004\000\002\016\002\000\002" +
    "\013\004\000\002\014\005\000\002\014\004\000\002\014" +
    "\002\000\002\021\002\000\002\022\002\000\002\023\002" +
    "\000\002\024\002\000\002\025\002\000\002\026\002\000" +
    "\002\012\017\000\002\005\005\000\002\005\013\000\002" +
    "\005\007\000\002\005\007\000\002\005\011\000\002\005" +
    "\007\000\002\005\011\000\002\005\011\000\002\006\004" +
    "\000\002\006\002\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\004\000\002\003\010\000\002\003" +
    "\006\000\002\003\006\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\003\005\000\002" +
    "\003\003\000\002\003\003\000\002\003\006\000\002\003" +
    "\010\000\002\004\005\000\002\004\004\000\002\004\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\017\005\001\002\000\004\002\237\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\217\001\002\000" +
    "\006\002\ufffa\037\ufffa\001\002\000\006\002\000\037\014" +
    "\001\002\000\006\002\ufffb\037\ufffb\001\002\000\004\061" +
    "\015\001\002\000\004\011\016\001\002\000\006\012\ufff6" +
    "\032\ufff6\001\002\000\006\012\020\032\021\001\002\000" +
    "\006\002\ufffc\037\ufffc\001\002\000\004\013\024\001\002" +
    "\000\006\012\ufff7\032\ufff7\001\002\000\004\061\041\001" +
    "\002\000\004\015\ufff1\001\002\000\004\015\026\001\002" +
    "\000\004\014\ufff0\001\002\000\004\014\030\001\002\000" +
    "\004\036\uffef\001\002\000\004\036\032\001\002\000\004" +
    "\047\uffee\001\002\000\004\047\034\001\002\000\004\050" +
    "\uffed\001\002\000\004\050\036\001\002\000\004\051\uffec" +
    "\001\002\000\004\051\040\001\002\000\004\061\uffeb\001" +
    "\002\000\004\007\042\001\002\000\010\010\ufff2\013\ufff2" +
    "\027\ufff2\001\002\000\010\010\045\013\024\027\044\001" +
    "\002\000\004\013\024\001\002\000\004\011\051\001\002" +
    "\000\010\010\ufff3\013\ufff3\027\ufff3\001\002\000\004\061" +
    "\050\001\002\000\010\010\ufff5\013\ufff5\027\ufff5\001\002" +
    "\000\060\005\uffe1\007\uffe1\011\uffe1\012\uffe1\020\uffe1\025" +
    "\uffe1\026\uffe1\031\uffe1\032\uffe1\033\uffe1\052\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002\000\060" +
    "\005\074\007\064\011\065\012\ufff8\020\063\025\056\026" +
    "\055\031\077\032\ufff8\033\057\052\071\054\053\055\100" +
    "\056\101\057\073\060\070\061\066\062\060\063\075\064" +
    "\072\065\076\066\062\067\067\001\002\000\004\007\210" +
    "\001\002\000\060\005\uffe2\007\uffe2\011\uffe2\012\uffe2\020" +
    "\uffe2\025\uffe2\026\uffe2\031\uffe2\032\uffe2\033\uffe2\052\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002" +
    "\000\004\007\204\001\002\000\036\005\074\007\064\025" +
    "\056\031\077\056\101\057\073\060\070\061\066\062\060" +
    "\063\075\064\072\065\076\066\062\067\067\001\002\000" +
    "\036\005\074\007\064\025\056\031\077\056\101\057\073" +
    "\060\070\061\066\062\060\063\075\064\072\065\076\066" +
    "\062\067\067\001\002\000\060\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\044\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\001\002\000\020\004\107\005\111\006\112\022\105" +
    "\023\110\024\106\030\173\001\002\000\060\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\027\uffd3\030\uffd3\031\uffd3\044\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3" +
    "\066\uffd3\067\uffd3\001\002\000\004\007\165\001\002\000" +
    "\040\005\074\007\064\015\161\025\056\031\077\056\101" +
    "\057\073\060\070\061\066\062\060\063\075\064\072\065" +
    "\076\066\062\067\067\001\002\000\054\005\uffe1\007\uffe1" +
    "\011\uffe1\012\uffe1\020\uffe1\025\uffe1\026\uffe1\031\uffe1\052" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\001" +
    "\002\000\060\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce\031" +
    "\uffce\044\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\001\002\000" +
    "\060\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\044" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\064\uffcd\065\uffcd\066\uffcd\067\uffcd\001\002\000\060\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\044\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\067\uffd6\001\002\000\004\007\146\001" +
    "\002\000\060\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\044\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\001\002\000" +
    "\004\007\143\001\002\000\036\005\074\007\064\025\056" +
    "\031\077\056\101\057\073\060\070\061\066\062\060\063" +
    "\075\064\072\065\076\066\062\067\067\001\002\000\060" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\044\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\001\002\000\060\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\044\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\001\002\000\004\061\137\001\002" +
    "\000\004\007\133\001\002\000\004\007\102\001\002\000" +
    "\036\005\074\007\064\025\056\031\077\056\101\057\073" +
    "\060\070\061\066\062\060\063\075\064\072\065\076\066" +
    "\062\067\067\001\002\000\022\004\107\005\111\006\112" +
    "\022\105\023\110\024\106\027\104\030\113\001\002\000" +
    "\036\005\074\007\064\025\056\031\077\056\101\057\073" +
    "\060\070\061\066\062\060\063\075\064\072\065\076\066" +
    "\062\067\067\001\002\000\036\005\074\007\064\025\056" +
    "\031\077\056\101\057\073\060\070\061\066\062\060\063" +
    "\075\064\072\065\076\066\062\067\067\001\002\000\036" +
    "\005\074\007\064\025\056\031\077\056\101\057\073\060" +
    "\070\061\066\062\060\063\075\064\072\065\076\066\062" +
    "\067\067\001\002\000\036\005\074\007\064\025\056\031" +
    "\077\056\101\057\073\060\070\061\066\062\060\063\075" +
    "\064\072\065\076\066\062\067\067\001\002\000\036\005" +
    "\074\007\064\025\056\031\077\056\101\057\073\060\070" +
    "\061\066\062\060\063\075\064\072\065\076\066\062\067" +
    "\067\001\002\000\036\005\074\007\064\025\056\031\077" +
    "\056\101\057\073\060\070\061\066\062\060\063\075\064" +
    "\072\065\076\066\062\067\067\001\002\000\036\005\074" +
    "\007\064\025\056\031\077\056\101\057\073\060\070\061" +
    "\066\062\060\063\075\064\072\065\076\066\062\067\067" +
    "\001\002\000\004\061\114\001\002\000\004\007\115\001" +
    "\002\000\042\005\uffc8\007\uffc8\010\uffc8\025\uffc8\027\uffc8" +
    "\031\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\001\002\000\042" +
    "\005\074\007\064\010\121\025\056\027\120\031\077\056" +
    "\101\057\073\060\070\061\066\062\060\063\075\064\072" +
    "\065\076\066\062\067\067\001\002\000\056\004\107\005" +
    "\111\006\112\007\uffc9\010\uffc9\022\105\023\110\024\106" +
    "\025\uffc9\027\uffc9\030\113\031\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\001\002\000\036\005\074\007\064\025\056\031" +
    "\077\056\101\057\073\060\070\061\066\062\060\063\075" +
    "\064\072\065\076\066\062\067\067\001\002\000\060\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\044\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\067\uffcb\001\002\000\056\004\107\005" +
    "\111\006\112\007\uffca\010\uffca\022\105\023\110\024\106" +
    "\025\uffca\027\uffca\030\113\031\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\067\uffca\001\002\000\060\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\044\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\001\002\000\060\004\uffdc\005\uffdc\006\112\007\uffdc\010" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\044\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\001\002" +
    "\000\060\004\107\005\111\006\112\007\uffdd\010\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\044\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\001\002\000\060" +
    "\004\uffde\005\uffde\006\112\007\uffde\010\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\027\uffde\030\uffde\031\uffde\044\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\001\002\000\060\004\107" +
    "\005\111\006\112\007\uffe0\010\uffe0\022\uffe0\023\110\024" +
    "\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0\044\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\001\002\000\060\004\107\005\111" +
    "\006\112\007\uffdb\010\uffdb\022\uffdb\023\110\024\106\025" +
    "\uffdb\027\uffdb\030\113\031\uffdb\044\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\001\002\000\022\004\107\005\111\006\112" +
    "\010\132\022\105\023\110\024\106\030\113\001\002\000" +
    "\060\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\044" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9" +
    "\064\uffd9\065\uffd9\066\uffd9\067\uffd9\001\002\000\036\005" +
    "\074\007\064\025\056\031\077\056\101\057\073\060\070" +
    "\061\066\062\060\063\075\064\072\065\076\066\062\067" +
    "\067\001\002\000\022\004\107\005\111\006\112\010\135" +
    "\022\105\023\110\024\106\030\113\001\002\000\004\044" +
    "\136\001\002\000\062\005\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\020\uffe8\021\uffe8\025\uffe8\026\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\052\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\001\002\000\004\007\140\001\002\000\004\010\141" +
    "\001\002\000\060\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\044\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\001\002" +
    "\000\060\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\027\uffda\030\uffda\031\uffda" +
    "\044\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\064\uffda\065\uffda\066\uffda\067\uffda\001\002\000\036" +
    "\005\074\007\064\025\056\031\077\056\101\057\073\060" +
    "\070\061\066\062\060\063\075\064\072\065\076\066\062" +
    "\067\067\001\002\000\022\004\107\005\111\006\112\010" +
    "\145\022\105\023\110\024\106\030\113\001\002\000\060" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\044\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002\000\036\005\074" +
    "\007\064\025\056\031\077\056\101\057\073\060\070\061" +
    "\066\062\060\063\075\064\072\065\076\066\062\067\067" +
    "\001\002\000\022\004\107\005\111\006\112\022\105\023" +
    "\110\024\106\027\150\030\113\001\002\000\036\005\074" +
    "\007\064\025\056\031\077\056\101\057\073\060\070\061" +
    "\066\062\060\063\075\064\072\065\076\066\062\067\067" +
    "\001\002\000\022\004\107\005\111\006\112\022\105\023" +
    "\110\024\106\027\152\030\113\001\002\000\036\005\074" +
    "\007\064\025\056\031\077\056\101\057\073\060\070\061" +
    "\066\062\060\063\075\064\072\065\076\066\062\067\067" +
    "\001\002\000\022\004\107\005\111\006\112\010\154\022" +
    "\105\023\110\024\106\030\113\001\002\000\004\044\155" +
    "\001\002\000\062\005\uffe9\007\uffe9\011\uffe9\012\uffe9\020" +
    "\uffe9\021\uffe9\025\uffe9\026\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\052\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9" +
    "\001\002\000\054\005\074\007\064\011\065\012\157\020" +
    "\063\025\056\026\055\031\077\052\071\054\053\055\100" +
    "\056\101\057\073\060\070\061\066\062\060\063\075\064" +
    "\072\065\076\066\062\067\067\001\002\000\062\005\uffea" +
    "\007\uffea\011\uffea\012\uffea\020\uffea\021\uffea\025\uffea\026" +
    "\uffea\031\uffea\032\uffea\033\uffea\052\uffea\054\uffea\055\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\066\uffea\067\uffea\001\002\000\022\004\107" +
    "\005\111\006\112\010\164\022\105\023\110\024\106\030" +
    "\113\001\002\000\004\010\162\001\002\000\036\005\074" +
    "\007\064\025\056\031\077\056\101\057\073\060\070\061" +
    "\066\062\060\063\075\064\072\065\076\066\062\067\067" +
    "\001\002\000\060\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\044\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\001\002" +
    "\000\060\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\044\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\001\002\000\036" +
    "\005\074\007\064\025\056\031\077\056\101\057\073\060" +
    "\070\061\066\062\060\063\075\064\072\065\076\066\062" +
    "\067\067\001\002\000\022\004\107\005\111\006\112\010" +
    "\167\022\105\023\110\024\106\030\113\001\002\000\052" +
    "\005\074\007\064\011\065\020\063\025\056\026\055\031" +
    "\077\052\071\054\053\055\100\056\101\057\073\060\070" +
    "\061\066\062\060\063\075\064\072\065\076\066\062\067" +
    "\067\001\002\000\062\005\uffe7\007\uffe7\011\uffe7\012\uffe7" +
    "\020\uffe7\021\171\025\uffe7\026\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\052\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\001\002\000\052\005\074\007\064\011\065\020\063" +
    "\025\056\026\055\031\077\052\071\054\053\055\100\056" +
    "\101\057\073\060\070\061\066\062\060\063\075\064\072" +
    "\065\076\066\062\067\067\001\002\000\062\005\uffe6\007" +
    "\uffe6\011\uffe6\012\uffe6\020\uffe6\021\uffe6\025\uffe6\026\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\052\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\001\002\000\004\061\174\001" +
    "\002\000\004\007\175\001\002\000\042\005\uffc8\007\uffc8" +
    "\010\uffc8\025\uffc8\027\uffc8\031\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\001\002\000\042\005\074\007\064\010\177\025" +
    "\056\027\120\031\077\056\101\057\073\060\070\061\066" +
    "\062\060\063\075\064\072\065\076\066\062\067\067\001" +
    "\002\000\022\004\uffcb\005\uffcb\006\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\030\uffcb\044\200\001\002\000\062\005\uffe3\007" +
    "\uffe3\011\uffe3\012\uffe3\020\uffe3\021\uffe3\025\uffe3\026\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\052\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\001\002\000\022\004\107\005" +
    "\111\006\112\022\105\023\110\024\106\030\113\044\202" +
    "\001\002\000\006\012\ufff9\032\ufff9\001\002\000\060\004" +
    "\107\005\111\006\112\007\uffd0\010\uffd0\022\105\023\110" +
    "\024\106\025\uffd0\027\uffd0\030\113\031\uffd0\044\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\067\uffd0\001\002\000\036\005\074\007" +
    "\064\025\056\031\077\056\101\057\073\060\070\061\066" +
    "\062\060\063\075\064\072\065\076\066\062\067\067\001" +
    "\002\000\022\004\107\005\111\006\112\010\206\022\105" +
    "\023\110\024\106\030\113\001\002\000\052\005\074\007" +
    "\064\011\065\020\063\025\056\026\055\031\077\052\071" +
    "\054\053\055\100\056\101\057\073\060\070\061\066\062" +
    "\060\063\075\064\072\065\076\066\062\067\067\001\002" +
    "\000\062\005\uffe5\007\uffe5\011\uffe5\012\uffe5\020\uffe5\021" +
    "\uffe5\025\uffe5\026\uffe5\031\uffe5\032\uffe5\033\uffe5\052\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002" +
    "\000\036\005\074\007\064\025\056\031\077\056\101\057" +
    "\073\060\070\061\066\062\060\063\075\064\072\065\076" +
    "\066\062\067\067\001\002\000\022\004\107\005\111\006" +
    "\112\022\105\023\110\024\106\027\212\030\113\001\002" +
    "\000\036\005\074\007\064\025\056\031\077\056\101\057" +
    "\073\060\070\061\066\062\060\063\075\064\072\065\076" +
    "\066\062\067\067\001\002\000\022\004\107\005\111\006" +
    "\112\010\214\022\105\023\110\024\106\030\113\001\002" +
    "\000\004\044\215\001\002\000\062\005\uffe4\007\uffe4\011" +
    "\uffe4\012\uffe4\020\uffe4\021\uffe4\025\uffe4\026\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\052\uffe4\054\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\001\002\000\010\010\ufff4\013\ufff4\027" +
    "\ufff4\001\002\000\004\011\uffff\001\002\000\004\011\221" +
    "\001\002\000\004\032\222\001\002\000\004\034\223\001" +
    "\002\000\004\036\224\001\002\000\004\016\225\001\002" +
    "\000\004\007\226\001\002\000\004\035\227\001\002\000" +
    "\004\041\230\001\002\000\004\042\231\001\002\000\004" +
    "\061\232\001\002\000\004\010\233\001\002\000\052\005" +
    "\074\007\064\011\065\020\063\025\056\026\055\031\077" +
    "\052\071\054\053\055\100\056\101\057\073\060\070\061" +
    "\066\062\060\063\075\064\072\065\076\066\062\067\067" +
    "\001\002\000\004\012\ufffe\001\002\000\004\012\236\001" +
    "\002\000\006\002\ufffd\037\ufffd\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\010\001\001" +
    "\000\002\001\001\000\004\011\011\001\001\000\004\010" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\016\001\001\000\004\015\021\001" +
    "\001\000\002\001\001\000\004\012\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\024\001\001\000" +
    "\002\001\001\000\004\022\026\001\001\000\002\001\001" +
    "\000\004\023\030\001\001\000\002\001\001\000\004\024" +
    "\032\001\001\000\002\001\001\000\004\025\034\001\001" +
    "\000\002\001\001\000\004\026\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\042" +
    "\001\001\000\006\012\046\013\045\001\001\000\006\012" +
    "\046\013\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\051\001" +
    "\001\000\006\003\060\005\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\202\001" +
    "\001\000\004\003\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\157\001\001\000\004\006\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\102\001\001" +
    "\000\002\001\001\000\004\003\130\001\001\000\004\003" +
    "\127\001\001\000\004\003\126\001\001\000\004\003\125" +
    "\001\001\000\004\003\124\001\001\000\004\003\123\001" +
    "\001\000\004\003\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\115\001\001\000\004\003\116\001" +
    "\001\000\002\001\001\000\004\003\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\146\001" +
    "\001\000\002\001\001\000\004\003\150\001\001\000\002" +
    "\001\001\000\004\003\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\060\005\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\165\001\001\000\002\001\001\000" +
    "\006\003\060\005\167\001\001\000\002\001\001\000\006" +
    "\003\060\005\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\175\001\001\000\004" +
    "\003\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\204\001\001\000\002\001\001\000\006\003\060\005" +
    "\206\001\001\000\002\001\001\000\004\003\210\001\001" +
    "\000\002\001\001\000\004\003\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\060\005\233\001\001\000\004\020\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp_list ::= 
            {
              LinkedList<IExp> RESULT =null;
		 RESULT = new LinkedList<IExp>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp_list ::= exp_list exp 
            {
              LinkedList<IExp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
						   if(exp!=null) list.add(exp);
						   RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp_list ::= exp_list COMMA exp 
            {
              LinkedList<IExp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(exp!=null) {list.add(exp); } RESULT=list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp DOT ID LPAREN exp_list RPAREN 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new CallExp(e1.line, e1.pos, e1, id.lexeme, list); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new NewExp(op.line, op.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= THIS 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= ID 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(id.line, id.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue r = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = e; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NotExp(op.line, op.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue f = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(f.line, f.pos, f.lexeme, f.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int toneleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int toneright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue tone = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneLiteral(tone.line, tone.pos, tone.lexeme, tone.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int buttonleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int buttonright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue button = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(button.line, button.pos, button.lexeme, button.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue color = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(color.line, color.pos, color.lexeme,color.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(n.line, n.pos, n.lexeme, n.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue r = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteCast(l.line, l.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyCheckButton(m.line, m.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyGetPixel(m.line, m.pos, e1, e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(op.line, op.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp LT exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new LtExp(op.line, op.pos, e1, e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MinusExp(op.line, op.pos, e1, e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new EqualExp(op.line, op.pos, e1, e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new PlusExp(op.line, op.pos, e1, e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MulExp(op.line, op.pos, e1, e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new AndExp(op.line, op.pos, e1, e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_list ::= 
            {
              LinkedList<IStatement> RESULT =null;
		 RESULT = new LinkedList<IStatement>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",4, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_list ::= statement_list statement 
            {
              LinkedList<IStatement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(stmt!=null) { list.add(stmt); } RESULT=list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= exp DOT ID LPAREN exp_list RPAREN SEMI 
            {
              IStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new CallStatement(e1.line, e1.pos, e1, id.lexeme, list); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyToneStart(t.line, t.pos, e1, e2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue w = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new WhileStatement(w.line, w.pos, e, stmt); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int ifstmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int ifstmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue ifstmt = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement stmt1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmt2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmt2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(ifstmt.line, ifstmt.pos, e, stmt1, stmt2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int ifstmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int ifstmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue ifstmt = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(ifstmt.line, ifstmt.pos, e, stmt, null); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyDelay(m.line, m.pos, e);  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetPixel(m.line, m.pos, e1, e2, e3); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new BlockStatement(l.line, l.pos, list); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= BOOLEAN NT$2 BYTE NT$3 INT NT$4 VOID NT$5 MEGGYCOLOR NT$6 MEGGYBUTTON NT$7 MEGGYTONE 
            {
              IType RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (IType) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = ToneType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$7 ::= 
            {
              IType RESULT =(IType) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 RESULT = ButtonType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$7",20, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              IType RESULT =(IType) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 RESULT = ColorType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$6",19, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              IType RESULT =(IType) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 RESULT = new VoidType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$5",18, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$4 ::= 
            {
              IType RESULT =(IType) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 RESULT = new IntType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$4",17, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              IType RESULT =(IType) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 RESULT = new ByteType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$3",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              IType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 RESULT = new BoolType(a.line, a.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_list ::= 
            {
              LinkedList<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_list ::= formal_list formal 
            {
              LinkedList<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int formalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Object formal = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
						   if(formal!=null) list.add(formal);
						   RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_list ::= formal_list COMMA formal 
            {
              LinkedList<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int formalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Object formal = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(formal!=null) {list.add(formal); } RESULT=list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new Formal(t.line, t.pos, t, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_list ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		 RESULT = new LinkedList<MethodDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_list ::= method_list method 
            {
              LinkedList<MethodDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> list = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int methodleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(method!=null) { list.add(method); } RESULT=list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method ::= PUBLIC type ID LPAREN formal_list RPAREN LBRACE statement_list 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int fmlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int fmlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<Formal> fmlist = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IStatement> stlist = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MethodDecl(p.line, p.pos, type.lexeme, id.lexeme, fmlist, new LinkedList<VarDecl>(), stlist, null); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method ::= PUBLIC type ID LPAREN formal_list RPAREN LBRACE statement_list RETURN exp SEMI 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int fmlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int fmlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		LinkedList<Formal> fmlist = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<IStatement> stlist = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MethodDecl(p.line, p.pos, type.lexeme, id.lexeme, fmlist, new LinkedList<VarDecl>(), stlist, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_list ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		 RESULT = new LinkedList<IClassDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_list",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_list ::= class_list class 
            {
              LinkedList<IClassDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IClassDecl> list = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int classleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int classright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IClassDecl class = (IClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(class!=null) {list.add(class); } RESULT=list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_list",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS ID LBRACE method_list RBRACE 
            {
              IClassDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int mlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> mlist = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new TopClassDecl(c.line, c.pos, name, new LinkedList<VarDecl>(), mlist); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN statement NT$1 RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-15)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              MainClass RESULT =(MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

            RESULT = new MainClass(m.line, m.pos, name.lexeme, param.lexeme, stmt);
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

            // Check filename is class name, if not exit with error message
            String p = name.lexeme + ".java";
            if(!p.equals(parser.programName)){
                System.out.println("ERROR: The name of the file does not match the class name");
                System.exit(0);
        }

        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class class_list 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int mainCleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mainCright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass mainC = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int clistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int clistright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> clist = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new Program(m.line, m.pos, mainC, clist); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

